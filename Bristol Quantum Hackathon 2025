{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "baeee723-c496-44d2-96bb-fb66758da288",
   "metadata": {},
   "outputs": [],
   "source": [
    " import networkx as nx\n",
    "\n",
    "    # Create a weighted graph\n",
    "\n",
    "weighted_graph = nx.Graph()\n",
    "weighted_graph.add_edge(0, 1, weight=2)\n",
    "weighted_graph.add_edge(1, 2, weight=500)\n",
    "weighted_graph.add_edge(2, 3, weight=1)\n",
    "weighted_graph.add_edge(3, 0, weight=5)\n",
    "weighted_graph.add_edge(3, 4, weight=10000)\n",
    "weighted_graph.add_edge(4, 1, weight=3)\n",
    "   # weighted_graph.add_edge(0, 3, weight=20)\n",
    "   # weighted_graph.add_edge(3, 5, weight=5)\n",
    "   # weighted_graph.add_edge(5, 4, weight=10)\n",
    "   # weighted_graph.add_edge(4, 2, weight=3)\n",
    "   \n",
    "\n",
    "from qiskit_optimization.applications import Maxcut\n",
    "\n",
    "    # Create a Maxcut object from the weighted graph\n",
    "maxcut = Maxcut(weighted_graph)\n",
    "\n",
    "    # Convert it to a QUBO (Quadratic Program)\n",
    "qubo = maxcut.to_quadratic_program()\n",
    "\n",
    "ising_op, offset = qubo.to_ising()\n",
    "\n",
    "\n",
    "from qiskit.circuit.library import QAOAAnsatz\n",
    "from qiskit_aer import AerSimulator\n",
    "from qiskit import transpile\n",
    "\n",
    "    # Create the QAOA ansatz (example with 2 layers)\n",
    "reps = 2\n",
    "qaoa_ansatz = QAOAAnsatz(cost_operator=ising_op, reps=reps)\n",
    "qaoa_ansatz.measure_all()\n",
    "\n",
    "    # Assign random parameters for demonstration\n",
    "import numpy as np\n",
    "betas = np.random.uniform(0, np.pi, reps)\n",
    "gammas = np.random.uniform(0, 2*np.pi, reps)\n",
    "param_dict = dict(zip(qaoa_ansatz.parameters, np.concatenate([betas, gammas])))\n",
    "qaoa_circuit = qaoa_ansatz.assign_parameters(param_dict)\n",
    "\n",
    "    # Run on simulator\n",
    "sim = AerSimulator()\n",
    "compiled = transpile(qaoa_circuit, sim)\n",
    "result = sim.run(compiled, shots=10000).result()\n",
    "counts = result.get_counts()\n",
    "\n",
    "print(\"Weighted MaxCut measurement counts:\")\n",
    "print(counts)\n",
    "\n",
    "\n",
    "import cirq\n",
    "import numpy as np\n",
    "\n",
    "def weighted_maxcut_hamiltonian(graph):\n",
    "        \"\"\"\n",
    "        Constructs a weighted MaxCut Hamiltonian:\n",
    "        H = sum_{(i,j) in E} w_ij * (I - Z_i Z_j)/2\n",
    "        \"\"\"\n",
    "        # Extract nodes\n",
    "    nodes = list(graph.nodes)\n",
    "    qubits = [cirq.NamedQubit(str(n)) for n in nodes]\n",
    "\n",
    "    n_qubits = len(nodes)\n",
    "    dim = 2 ** n_qubits\n",
    "\n",
    "        # Identity\n",
    "    I = np.eye(dim, dtype=complex)\n",
    "\n",
    "        # Initialize the total Hamiltonian\n",
    "    H = np.zeros((dim, dim), dtype=complex)\n",
    "\n",
    "        # For each edge, add the weighted ZZ term\n",
    "    for u, v, data in graph.edges(data=True):\n",
    "        w = data.get('weight', 1.0)  # Default weight = 1 if not specified\n",
    "            # Create a ZZ gate matrix\n",
    "        zz_circuit = cirq.Circuit(cirq.IdentityGate(n_qubits)(*qubits),\n",
    "                                      cirq.ZZPowGate(exponent=1)(qubits[u], qubits[v]))\n",
    "        zz_matrix = zz_circuit.unitary()\n",
    "\n",
    "            # Weighted cost term\n",
    "        H += w * 0.5 * (I - zz_matrix)\n",
    "\n",
    "    return H\n",
    "\n",
    "def is_trivial(solution):\n",
    "    return solution == \"0\" * len(solution) or solution == \"1\" * len(solution)\n",
    "\n",
    "filtered_counts = {sol: cnt for sol, cnt in counts.items() if not is_trivial(sol)}\n",
    "print(\"Filtered non-trivial results:\")\n",
    "print(filtered_counts)\n",
    "\n",
    "    # (Optional) Step 7: Compute the classical maximum cut for reference\n",
    "def max_cut_value(graph):\n",
    "    nodes = list(graph.nodes)\n",
    "    best_cut = 0\n",
    "    best_partition = None\n",
    "        # Loop over possible partitions\n",
    "    for i in range(1, 1 << len(nodes)):\n",
    "            set_a = [nodes[j] for j in range(len(nodes)) if (i >> j) & 1]\n",
    "            set_b = [node for node in nodes if node not in set_a]\n",
    "            cut_edges = sum(1 for u, v in graph.edges() if (u in set_a and v in set_b) or (u in set_b and v in set_a))\n",
    "            if cut_edges > best_cut:\n",
    "                best_cut = cut_edges\n",
    "                best_partition = (set_a, set_b)\n",
    "        return best_cut, best_partition\n",
    "\n",
    "    max_cut, partition = max_cut_value(weighted_graph)\n",
    "    print(f\"Classical maximum cut: {max_cut}\")\n",
    "    print(f\"Best partition: {partition}\")\n",
    "\n",
    "    # Step 8: Visualize the measurement outcomes\n",
    "    plot_histogram(counts)\n",
    "    plt.show()\n",
    "\n",
    "    fig_3 = plot_histogram(counts)\n",
    "    fig_3"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
